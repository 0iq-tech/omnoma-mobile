import * as fs from 'fs'
import * as path from 'path'

// Type to represent a nested translation structure
type TranslationTree = {
  [key: string]: TranslationTree | string
}

// Function to recursively build path strings
function buildPaths(
  obj: TranslationTree,
  currentPath: string = '',
  paths: Set<string> = new Set(),
): Set<string> {
  for (const key in obj) {
    const value = obj[key]
    const newPath = currentPath ? `${currentPath}.${key}` : key

    if (typeof value === 'string') {
      paths.add(newPath)
    } else {
      buildPaths(value as TranslationTree, newPath, paths)
    }
  }

  return paths
}

// Function to generate the type definition
function generateTypeDefinition(translations: TranslationTree): string {
  const paths = buildPaths(translations)
  const typeLines = Array.from(paths).map((path) => `  '${path}'`)

  return `// Generated by translation-codegen
export type TranslationKey = 
${typeLines.join(' |\n')}\n`
}

// Main function to generate the types file
function generateTypes(
  inputFile: string,
  outputFile: string,
  exportName: string = 'enTranslations',
) {
  // Read and parse the input file
  const content = fs.readFileSync(inputFile, 'utf-8')
  const matches = content.match(
    new RegExp(`${exportName}\\s*=\\s*({[\\s\\S]*?})\\s*as const`),
  )

  if (!matches) {
    throw new Error(`Could not find ${exportName} in file`)
  }

  // Extract the translation object
  const translationObject = eval(`(${matches[1]})`)

  // Generate the type definition
  const typeDefinition = generateTypeDefinition(translationObject)

  // Write the output file
  fs.writeFileSync(outputFile, typeDefinition)
}

// CLI usage
if (require.main === module) {
  const [, , inputFile, outputFile] = process.argv

  if (!inputFile || !outputFile) {
    console.error('Usage: node generate-types.js <inputFile> <outputFile>')
    process.exit(1)
  }

  try {
    generateTypes(path.resolve(inputFile), path.resolve(outputFile))
    console.log('Successfully generated translation types')
  } catch (error) {
    console.error('Error generating types:', error)
    process.exit(1)
  }
}

name: PR Code Quality Check

on:
  pull_request:
    branches: [main]
    paths:
      - 'src/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  pr-check:
    concurrency:
      group: pr-check-${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      pr-passed: ${{ steps.set-result.outputs.pr-passed }}

    if: github.event.pull_request.head.repo.full_name == github.repository

    env:
      NODE_OPTIONS: '--max-old-space-size=5120'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --prefer-offline
        env:
          NODE_ENV: development

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            .eslintcache
            tsconfig.tsbuildinfo
            node_modules/.cache/prettier
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json', '**/tsconfig.json', '**/.prettierrc') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Cache FSD results
        uses: actions/cache@v3
        with:
          path: .fsd-cache
          key: ${{ runner.os }}-fsd-${{ hashFiles('**/src/**/*.{ts,tsx}') }}
          restore-keys: |
            ${{ runner.os }}-fsd-

      - name: Get files for checking
        id: files-to-check
        run: |
          # Ensure we're comparing against the base branch
          git fetch origin ${{ github.base_ref }}

          # Get changed files, handling potential errors
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }} -- 'src/**/*.ts' 'src/**/*.tsx' || echo "")

          if [ -z "$CHANGED_FILES" ]; then
            echo "No relevant files changed"
            echo "changed=" >> $GITHUB_OUTPUT
          else
            # Validate each file exists before adding to output
            VALID_FILES=""
            while IFS= read -r file; do
              if [ -f "$file" ]; then
                VALID_FILES="${VALID_FILES}${file}\n"
              fi
            done <<< "$CHANGED_FILES"
            
            if [ -z "$VALID_FILES" ]; then
              echo "No valid files to check"
              echo "changed=" >> $GITHUB_OUTPUT
            else
              echo -e "$VALID_FILES" | tr '\n' ' ' > changed_files.txt
              echo "changed=$(cat changed_files.txt)" >> $GITHUB_OUTPUT
            fi
          fi

          # Get root .d.ts files
          ROOT_DTS_FILES=$(find . -maxdepth 1 -name "*.d.ts" -type f || echo "")
          echo "dts=$ROOT_DTS_FILES" >> $GITHUB_OUTPUT

      # Group 1: TypeScript + Prettier
      - name: Run Group 1 Checks
        id: group-1
        if: steps.files-to-check.outputs.changed != ''
        run: |
          mkdir -p logs

          # Start time for the group
          GROUP1_START=$(date +%s)

          # TypeScript with timing
          TS_START=$(date +%s)
          (NODE_OPTIONS="--max-old-space-size=3584" timeout 5m npx tsc --noEmit ${{ steps.files-to-check.outputs.changed }} ${{ steps.files-to-check.outputs.dts }} 2>&1 | tee logs/typescript.log) &
          TS_PID=$!

          # Prettier with timing
          PRETTIER_START=$(date +%s)
          (NODE_OPTIONS="--max-old-space-size=1024" timeout 3m npx prettier --check ${{ steps.files-to-check.outputs.changed }} 2>&1 | tee logs/prettier.log) &
          PRETTIER_PID=$!

          # Wait and calculate times
          wait $TS_PID
          TS_EXIT=$?
          TS_END=$(date +%s)
          TS_DURATION=$((TS_END - TS_START))

          wait $PRETTIER_PID
          PRETTIER_EXIT=$?
          PRETTIER_END=$(date +%s)
          PRETTIER_DURATION=$((PRETTIER_END - PRETTIER_START))

          # Calculate total group time
          GROUP1_END=$(date +%s)
          GROUP1_DURATION=$((GROUP1_END - GROUP1_START))

          # Save times to files for the report
          echo $TS_DURATION > logs/typescript.time
          echo $PRETTIER_DURATION > logs/prettier.time
          echo $GROUP1_DURATION > logs/group1.time

          # Check results
          if [ $TS_EXIT -ne 0 ] || [ $PRETTIER_EXIT -ne 0 ]; then
            echo "Group 1 Checks failed"
            exit 1
          fi
          echo "Group 1 Checks passed successfully"

      # Group 2: ESLint + FSD Architecture
      - name: Run Group 2 Checks
        id: group-2
        if: success() || failure()
        run: |
          # Start time for the group
          GROUP2_START=$(date +%s)

          # ESLint with timing
          ESLINT_START=$(date +%s)
          (NODE_OPTIONS="--max-old-space-size=2048" timeout 4m npx eslint --report-unused-disable-directives --cache ${{ steps.files-to-check.outputs.changed }} 2>&1 | tee logs/eslint.log) &
          ESLINT_PID=$!

          # FSD check with timing
          FSD_START=$(date +%s)
          (NODE_OPTIONS="--max-old-space-size=2048" timeout 4m npm run fsd:check 2>&1 | tee logs/fsd.log) &
          FSD_PID=$!

          # Wait and calculate times
          wait $ESLINT_PID
          ESLINT_EXIT=$?
          ESLINT_END=$(date +%s)
          ESLINT_DURATION=$((ESLINT_END - ESLINT_START))

          wait $FSD_PID
          FSD_EXIT=$?
          FSD_END=$(date +%s)
          FSD_DURATION=$((FSD_END - FSD_START))

          # Calculate total group time
          GROUP2_END=$(date +%s)
          GROUP2_DURATION=$((GROUP2_END - GROUP2_START))

          # Save times to files for the report
          echo $ESLINT_DURATION > logs/eslint.time
          echo $FSD_DURATION > logs/fsd.time
          echo $GROUP2_DURATION > logs/group2.time

          # Check results
          if [ $ESLINT_EXIT -ne 0 ] || [ $FSD_EXIT -ne 0 ]; then
            echo "Group 2 Checks failed"
            exit 1
          fi
          echo "Group 2 Checks passed successfully"

      # Collect logs on failure
      - name: Collect Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: check-logs
          path: logs/
          retention-days: 5

      - name: Set PR Check Result
        id: set-result
        if: always()
        run: |
          if [ "${{ steps.group-1.outcome }}" = "success" ] && [ "${{ steps.group-2.outcome }}" = "success" ]; then
            echo "pr-passed=true" >> $GITHUB_OUTPUT
          else
            echo "pr-passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Report PR Check Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const summary = [];
            const details = [];
            const timing = [];

            // Function to format seconds to mm:ss
            const formatTime = (seconds) => {
              const mins = Math.floor(seconds / 60);
              const secs = seconds % 60;
              return `${mins}:${secs.toString().padStart(2, '0')}`;
            };

            // Read timing information
            const fs = require('fs');
            const readTime = (file) => {
              try {
                return parseInt(fs.readFileSync(`logs/${file}.time`));
              } catch (e) {
                return null;
              }
            };

            if ('${{ steps.files-to-check.outputs.changed }}' === '') {
              summary.push('⏭️ No relevant files to check');
            } else {
              const group1Time = readTime('group1');
              const tsTime = readTime('typescript');
              const prettierTime = readTime('prettier');
              
              if ('${{ steps.group-1.outcome }}' === 'success') {
                summary.push('✅ Group 1: TypeScript and Prettier checks passed');
                details.push('- TypeScript: Passed ✅');
                details.push('- Prettier: Passed ✅');
              } else {
                summary.push('❌ Group 1: TypeScript and/or Prettier checks failed');
                details.push('- Please check the logs for detailed errors');
              }
              
              if (group1Time) {
                timing.push(`⏱️ Group 1 total time: ${formatTime(group1Time)}`);
                if (tsTime) timing.push(`  - TypeScript: ${formatTime(tsTime)}`);
                if (prettierTime) timing.push(`  - Prettier: ${formatTime(prettierTime)}`);
              }
            }

            const group2Time = readTime('group2');
            const eslintTime = readTime('eslint');
            const fsdTime = readTime('fsd');

            if ('${{ steps.group-2.outcome }}' === 'success') {
              summary.push('✅ Group 2: ESLint and FSD Architecture checks passed');
              details.push('- ESLint: Passed ✅');
              details.push('- FSD Architecture: Passed ✅');
            } else {
              summary.push('❌ Group 2: ESLint and/or FSD Architecture checks failed');
              details.push('- Please check the logs for detailed errors');
            }

            if (group2Time) {
              timing.push(`⏱️ Group 2 total time: ${formatTime(group2Time)}`);
              if (eslintTime) timing.push(`  - ESLint: ${formatTime(eslintTime)}`);
              if (fsdTime) timing.push(`  - FSD: ${formatTime(fsdTime)}`);
            }

            const message = [
              '## PR Code Quality Check Results',
              '',
              ...summary,
              '',
              '### Details',
              '',
              ...details,
              '',
              '### Timing',
              '',
              ...timing,
              '',
              '> Memory allocation:',
              '> - TypeScript: 3.5GB',
              '> - Prettier: 1GB',
              '> - ESLint: 2GB',
              '> - FSD Architecture: 2GB',
              '',
              '_Logs are available as artifacts for failed runs_'
            ].join('\n');

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number: number,
              body: message
            });
